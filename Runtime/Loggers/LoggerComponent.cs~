using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Object = UnityEngine.Object;

namespace Francespo.Loggers
{
    public class LoggerComponent : MonoBehaviour
    {
        [Header("Global Object Logs Settings")]
        [SerializeField] bool showLogs = true;
        [SerializeField] bool showWarningLogs = true;
        [SerializeField] bool showErrorLogs = true;

        [Header("Recurring Object Logs Settings")]
        [SerializeField] bool showRecurringLogs = true;
        [SerializeField, Min(0)] float firstRecurringLogAfterSeconds = 0f;
        [SerializeField, Min(0)] float recurringLogSecondsInterval = 1f;


        private List<RecurringLog> recurringLogs = new List<RecurringLog>();


        private void Start()
        {
            StartCoroutine(C_RecurringLog(firstRecurringLogAfterSeconds));
        }

        IEnumerator C_RecurringLog(float timeToWait)
        {
            yield return new WaitForSeconds(timeToWait);
            if (showRecurringLogs)
            {
                foreach (RecurringLog recurringLog in recurringLogs)
                    recurringLog.LogIfCondition();
                StartCoroutine(C_RecurringLog(recurringLogSecondsInterval));
            }
        }

        public void Init(bool showLogs = true, bool showWarningLogs = true, bool showErrorLogs = true, bool showRecurringLogs = true, float firstRecurringLogAfterSeconds = 0f, float recurringLogSecondsInterval = 1f)
        {
            this.showLogs = showLogs;
            this.showWarningLogs = showWarningLogs;
            this.showErrorLogs = showErrorLogs;

            this.showRecurringLogs = showRecurringLogs;
            this.firstRecurringLogAfterSeconds = firstRecurringLogAfterSeconds;
            this.recurringLogSecondsInterval = recurringLogSecondsInterval;
        }


        public void AddRecurringLog(RecurringLog recurringLog)
        {
            recurringLogs.Add(recurringLog);
        }
        public void RemoveRecurringLog(RecurringLog recurringLog)
        {
            recurringLogs.Remove(recurringLog);
        }


        public void Log(object message, Object context)
        {
            if (showLogs) Debug.Log(message, context);
        }
        public void Log(object message)
        {
            if (showLogs) Debug.Log(message);
        }

        public void LogWarning(object message, Object context)
        {
            if (showWarningLogs) Debug.LogWarning(message, context);
        }
        public void LogWarning(object message)
        {
            if (showWarningLogs) Debug.LogWarning(message);
        }

        public void LogError(object message, Object context)
        {
            if (showErrorLogs) Debug.LogError(message, context);
        }
        public void LogError(object message)
        {
            if (showErrorLogs) Debug.LogError(message);
        }

        public void DrawLine(Vector3 start, Vector3 end)
        {
            if (showLogs) Debug.DrawLine(start, end);
        }
        public void DrawLine(Vector3 start, Vector3 end, Color color)
        {
            if (showLogs) Debug.DrawLine(start, end, color);
        }
        public void DrawLine(Vector3 start, Vector3 end, Color color, float duration)
        {
            if (showLogs) Debug.DrawLine(start, end, color, duration);
        }

        public void LogMultiple(IEnumerable objects)
        {
            if (showLogs)
            {
                string debug = string.Empty;
                foreach (object obj in objects)
                    debug += "\n" + obj;
                Debug.Log(debug);
            }
        }
        public void LogMultiple(string header, IEnumerable objects)
        {
            if (showLogs)
            {
                string debug = header;
                foreach (object obj in objects)
                    debug += "\n" + obj;
                Debug.Log(debug);
            }
        }
    }
}